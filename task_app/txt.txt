class UserSerializer(serializers.ModelSerializer):
    """
    Serializer class for the User model.

    This serializer is used to convert User model instances into JSON representation and vice versa.

    Attributes:
        model (User): The User model class.
        fields (list): A list of fields to include in the serialized representation. If set to '__all__', all fields will be included.

    """
    class Meta:
        model = User
        fields = '__all__'


    class User(AbstractUser):
    username = models.CharField(max_length=100, unique=True)
    email = models.EmailField(unique=True)
    password = models.CharField(max_length=100)
    REQUIRED_FIELDS = ['email']  
    USERNAME_FIELD = 'username' 

    from django.shortcuts import render

from rest_framework import viewsets
from .models import User  
from .serializers import UserSerializer


class UserViewSet(viewsets.ModelViewSet):
    queryset = User.objects.all()
    serializer_class = UserSerializer


from django.db import models

# Create your models here.
from users.models import User

class Task(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    description = models.TextField()
    completed = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.title

    from rest_framework import serializers
from .models import Task

class TaskSerializer(serializers.ModelSerializer):
    """
    Serializer for the Task model.

    Attributes:
        model (Task): The Task model class.
        fields (list): A list of all fields to be serialized.
    """
    class Meta:
        model = Task
        fields = ['id', 'user', 'title', 'description', 'completed', 'created_at', 'updated_at']
        read_only_fields = ['user', 'created_at', 'updated_at']
        
    def create(self, validated_data):
        validated_data['user'] = self.context['request'].user
        return super().create(validated_data)


class TaskViewSet(viewsets.ModelViewSet):
    """
    A view set for managing tasks.

    This view set provides CRUD (Create, Retrieve, Update, Delete) operations for tasks.

    Attributes:
        queryset (QuerySet): The queryset of all tasks.
        serializer_class (Serializer): The serializer class used for task serialization.

    """
    queryset = Task.objects.all()
    serializer_class = TaskSerializer
    permission_classes = [IsAuthenticated]
    
    def get_queryset(self):
        return self.queryset.filter(user=self.request.user)